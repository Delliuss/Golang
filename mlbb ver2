package main

import (
	"fmt"
	"html/template"
	"net/http"
	"strings"
)

// Структура для персонажа
type Character struct {
	Name        string // Имя героя
	Description string // Краткое описание героя
	ImageURL    string // Фото персонажа
	ReleaseDate string // Дата выхода героя
	Role        string // Роль в игре
	Class       string // Тип урона персонажа
	Price       int    // Цена персонажа в игре
}

// Структура для пользователя
type User struct {
	Username string // Имя пользователя
	Password string // Пароль пользователя
}

// Список персонажей и их характеристик
var characters = []Character{
	{
		Name:        "Натан",
		Description: "Натан — стрелок, который использует свои уникальные способности для нанесения урона на расстоянии и маневрирования по полю боя. Он может перемещаться в пространстве, избегая атак врагов, и наносить мощный урон с помощью своих навыков. Его способности позволяют ему быстро переключаться между атакой и уклонением, что делает его опасным противником.",
		ImageURL:    "https://i.pinimg.com/originals/34/a1/97/34a197fa001faeb4255fe67a899e113a.jpg",
		ReleaseDate: "2021-07-21",
		Role:        "Стрелок",
		Class:       "Магический",
		Price:       32000,
	},
	{
		Name:        "Алдос",
		Description: "Алдос — боец с неплохим уроном и повышенной живучестью. В его арсенале есть мощные навыки, которые помогут преследовать и уничтожать врагов в любом месте карты. ",
		ImageURL:    "https://i.pinimg.com/736x/0b/67/15/0b6715d1177e799decd44430ae11ac97.jpg",
		ReleaseDate: "2016-07-14",
		Role:        "Убийца",
		Class:       "Физический",
		Price:       32000,
	},
	{
		Name:        "Лэйла",
		Description: "Лэйла — стрелок, который может наносить урон на расстоянии и имеет мощные навыки.",
		ImageURL:    "https://i.pinimg.com/736x/4e/76/68/4e7668c59b55f51addf771af44cfe834.jpg",
		ReleaseDate: "2016-07-14",
		Role:        "Стрелок",
		Class:       "Физический",
		Price:       32000,
	},
	{
		Name:        "Госсен",
		Description: "Госсен — убийца, который может быстро перемещаться и наносить урон нескольким врагам.",
		ImageURL:    "https://i.pinimg.com/736x/ea/4e/0e/ea4e0e3e210ebf65f0f790ff3e5be9d0.jpg",
		ReleaseDate: "2017-01-12",
		Role:        "Убийца",
		Class:       "Магический",
		Price:       32000,
	},
	{
		Name:        "Ланселот",
		Description: "Ланселот — ловкий герой, который может наносить урон и избегать атак врагов.",
		ImageURL:    "https://i.pinimg.com/originals/99/d3/d0/99d3d0b1b862f57d3f6f19a578cb9180.jpg",
		ReleaseDate: "2017-03-14",
		Role:        "Боец",
		Class:       "Физический",
		Price:       32000,
	},
	{
		Name:        "Мия",
		Description: "Мия — стрелок, который может быстро атаковать и имеет навыки, увеличивающие её скорость.",
		ImageURL:    "https://i.pinimg.com/originals/e1/65/cb/e165cb2444763636904a6242403e1a17.jpg",
		ReleaseDate: "2016-07-14",
		Role:        "Стрелок",
		Class:       "Физический",
		Price:       32000,
	},
	{
		Name:        "Кагура",
		Description: "Кагура — маг, который использует свой зонтик, чтобы наносить урон врагам и контролировать поле боя.",
		ImageURL:    "https://i.pinimg.com/736x/ec/53/b5/ec53b51e9611f789413b4dae2dc87bee.jpg",
		ReleaseDate: "2017-10-12",
		Role:        "Маг",
		Class:       "Магический",
		Price:       32000,
	},
	{
		Name:        "Чу",
		Description: "Чу — боец, который может быстро перемещаться и сбивать врагов с ног, обеспечивая контроль над полем боя.",
		ImageURL:    "https://i.pinimg.com/236x/46/7c/a6/467ca631d39589694a4df6b0d17832f0.jpg",
		ReleaseDate: "2017-01-12",
		Role:        "Боец",
		Class:       "Физический",
		Price:       24000,
	},
	{
		Name:        "Гатоткача",
		Description: "Гатоткача — мощный танк с несгибаемой решимостью. Его способности позволяют ему эффективно защищать своих союзников и выводить врагов из равновесия, что делает его идеальным инициатором боя. Он может как поглощать удар, так и наносить значительный урон.",
		ImageURL:    "https://i.pinimg.com/originals/80/26/4b/80264b369bda8acdef40faf370121e25.jpg",
		ReleaseDate: "2018-09-10",
		Role:        "Tank",
		Class:       "Физический",
		Price:       30000,
	},
	{
		Name:        "Эстес",
		Description: "Эстес — поддерживающий герой с магическими способностями. Его навыки исцеления и buffs позволяют ему поддерживать боеспособность своей команды на высоком уровне. Он не только защищает своих союзников, но и создает стратегические преимущества на поле боя.",
		ImageURL:    "https://i.pinimg.com/originals/4f/93/7c/4f937c071a3cacc2b4c15ee10b95a7c3.jpg",
		ReleaseDate: "2019-01-11",
		Role:        "Support",
		Class:       "Магический",
		Price:       28000,
	},
	{
		Name:        "Минотавр",
		Description: "Минотавр — недосягаемый танк с инфернальными механиками. Его способности позволяют ему наводить ужас на врагов, толкая их назад и нарушая их движения. Он может выдерживать урон и обеспечивать защиту союзникам, одновременно атакуя врагов.",
		ImageURL:    "https://i.pinimg.com/736x/6d/ca/b5/6dcab54745fd3f56d01ee507fc74af36.jpg",
		ReleaseDate: "2018-12-06",
		Role:        "Tank",
		Class:       "Физический",
		Price:       32000,
	},
}

// Список пользователей
var users []User

func homeHandler(w http.ResponseWriter, r *http.Request) {
	// Заголовок
	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	// Получаем значение параметра поиска
	searchQuery := r.URL.Query().Get("search")
	var filteredCharacters []Character

	// Фильтруем персонажей по запросу
	for _, character := range characters {
		if searchQuery == "" || strings.Contains(strings.ToLower(character.Name), strings.ToLower(searchQuery)) {
			filteredCharacters = append(filteredCharacters, character)
		}
	}

	// HTML-шаблон
	tmpl := `
	<!DOCTYPE html>
	<html lang="ru">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Персонажи MLBB</title>
		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f4f4f4;
				margin: 0;
				padding: 20px;
			}
			h1 {
				color: #333;
				text-align: center;
			}
			.container {
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				gap: 20px;
			}
			.character {
				background-color: #fff;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
				padding: 15px;
				width: 250px;
				transition: transform 0.2s;
				cursor: pointer;
			}
			.character:hover {
				transform: scale(1.05);
			}
			.name {
				font-weight: bold;
				font-size: 1.2em;
				color: #007bff;
			}
			.description {
				color: #555;
				margin-top: 10px;
			}
			.image {
				width: 100%;
				height: auto;
				border-radius: 8px;
			}
			.search-form {
				text-align: center;
				margin-bottom: 20px;
			}
			.search-input {
				padding: 10px;
				width: 200px;
				border: 1px solid #ccc;
				border-radius: 4px;
			}
			.search-button {
				padding: 10px 15px;
				border: none;
				background-color: #007bff;
				color: white;
				border-radius: 4px;
				cursor: pointer;
			}
			.search-button:hover {
				background-color: #0056b3;
			}
			.details {
				display: none;
				background-color: #f9f9f9;
				border: 1px solid #ccc;
				border-radius: 8px;
				padding: 10px;
				margin-top: 10px;
			}
		</style>
		<script>
			function toggleDetails(id) {
				var details = document.getElementById(id);
				if (details.style.display === "none" || details.style.display === "") {
					details.style.display = "block";
				} else {
					details.style.display = "none";
				}
			}
		</script>
	</head>
	<body>
		<h1>Персонажи из Mobile Legends: Bang Bang</h1>
		<div class="search-form">
			<form method="GET" action="/">
				<input type="text" name="search" class="search-input" placeholder="Поиск персонажа..." value="{{.SearchQuery}}">
				<button type="submit" class="search-button">Поиск</button>
			</form>
		</div>
		<div class="container">
			{{range .Characters}}
			<div class="character" onclick="toggleDetails('{{.Name}}-details')">
				<img src="{{.ImageURL}}" alt="{{.Name}}" class="image">
				<div class="name">{{.Name}}</div>
				<div class="description">{{.Description}}</div>
				<div id="{{.Name}}-details" class="details">
					<p><strong>Дата выхода:</strong> {{.ReleaseDate}}</p>
					<p><strong>Роль:</strong> {{.Role}}</p>
					<p><strong>Тип урона:</strong> {{.Class}}</p>
					<p><strong>Цена:</strong> {{.Price}} золота</p>
				</div>
			</div>
			{{end}}
		</div>
		<div class="registration-form">
			<h2>Регистрация</h2>
			<form method="POST" action="/register">
				<input type="text" name="username" placeholder="Имя пользователя" required>
				<input type="password" name="password" placeholder="Пароль" required>
				<button type="submit">Зарегистрироваться</button>
			</form>
		</div>
	</body>
	</html>
	`

	// Создание шаблона
	t, err := template.New("webpage").Parse(tmpl)
	if err != nil {
		http.Error(w, "Ошибка при создании шаблона", http.StatusInternalServerError)
		return
	}

	// Создание структуры для передачи данных в шаблон
	data := struct {
		Characters  []Character
		SearchQuery string
	}{
		Characters:  filteredCharacters,
		SearchQuery: searchQuery,
	}

	// Выполнение шаблона и передача данных
	if err := t.Execute(w, data); err != nil {
		http.Error(w, "Ошибка при выполнении шаблона", http.StatusInternalServerError)
	}
}

func registerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		// Получаем данные из формы
		username := r.FormValue("username")
		password := r.FormValue("password")

		// Проверяем, существует ли уже пользователь с таким именем
		for _, user := range users {
			if user.Username == username {
				http.Error(w, "Пользователь с таким именем уже существует", http.StatusConflict)
				return
			}
		}

		// Добавляем нового пользователя в список
		users = append(users, User{Username: username, Password: password})

		// Перенаправляем на главную страницу после успешной регистрации
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	// Если метод не POST, возвращаем ошибку
	http.Error(w, "Метод не разрешен", http.StatusMethodNotAllowed)
}

func main() {
	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/register", registerHandler) // Обработчик для регистрации
	// Запуск сервера на порту 8080
	fmt.Println("Сервер запущен на http://localhost:8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		fmt.Println("Ошибка при запуске сервера:", err)
	}
}
